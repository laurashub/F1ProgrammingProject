Help on module DNABindingMap:

NAME
    DNABindingMap

CLASSES
    builtins.Exception(builtins.BaseException)
        DNABindingMapError
    builtins.object
        DNABindingMap
    
    class DNABindingMap(builtins.object)
     |  DNABindingMap(sequence=None)
     |  
     |  This class finds the proteins that will bind to a dna sequence.
     |  
     |  Attributes: 
     |          sequence(str): the dna sequence used for binding
     |          binding_data(dict): the binding map of the dna
     |  
     |  Methods defined here:
     |  
     |  __init__(self, sequence=None)
     |      Args:
     |              sequence(str): a dna sequence
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  findBindingProteins(self, dna_len_threshold=None)
     |      This function finds the proteins that will bind to the dna sequence.
     |      
     |      Parameters:
     |              dna_len_threshold(int): the shortest length of a matched dna sequence
     |      
     |      Returns:
     |              match(dict): 
     |                      keys: the matched protein indexes in the input dataframe
     |                      values: the starting and end indexes of the dna that the protein binds
     |      Example:
     |              match = findBindingProtein(dna_len_threshold = 5)
     |  
     |  getBindingProteins(self, classification=None, subtype=None)
     |      This function get the specified group of proteins for dna binding.
     |      
     |      Parameters:
     |              classification(str): The classfication of proteins
     |              subtype(str): The sybtype of proteins
     |      
     |      Returns:
     |              A panda dataframe with the group of proteins
     |      
     |      Examples:
     |              getBindingProteins(classification = "Enzyme")
     |              getBindingProteins(classification = "Transcription factor", subtype = "Endonuclease")
     |  
     |  getSequence(self)
     |      This function returns the dna sequence used for binding.
     |  
     |  reset(self)
     |  
     |  setSequence(self, sequence)
     |      This function generate the input DNA sequence that will be used for protein binding and store it in the sequence attribute.
     |      It can read the user input in three formats: DNA sequence string, fasta file, and genbank id
     |      
     |      Parameters:
     |              sequence(string): the DNA sequence / the path of a fasta file / the genbank id
     |      
     |      
     |      Example:
     |              setSequence("agtctgctgactgacgtttg")
     |              setSequence("../filename.fasta")
     |              setSequence("568815597")
     |  
     |  showResults(self, classification=None, subtype=None, pdb=None, circular=False, show_sequence=False, filename=None)
     |      This function gives a cartoon plots showing where the proteins bind the dna.
     |      
     |      Parameters:
     |              classification(str): The classfication of proteins
     |              subtype(str): The sybtype of proteins
     |              pdb(str): PDB ID
     |              circular(bool): Display the results in circular plot
     |              show_sequence(bool): Show sequence on graph, discouraged for long sequences
     |              filename(str): filename to save graph to, otherwise will only show
     |      
     |      Examples:
     |              showResults(classification = "Enzyme")
     |              showResults(classification = "Transcription factor", subtype = "Endonuclease")
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class DNABindingMapError(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      DNABindingMapError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args

FUNCTIONS
    test1()
        #### test cases ###
    
    test2()
    
    test3()
    
    test4()
    
    test5()
    
    test6()
    
    test7()
    
    test8()
    
    test9()

DATA
    df =     #PDB_ID  ... TYPE_CONTACTS(1;2;3;4;5;6;7;8;9...17;33;154     ...

FILE
    /Users/student/Desktop/Programming_fund/F1ProgrammingProject/DNABindingMap.py


